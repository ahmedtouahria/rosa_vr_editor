import * as THREE from "./three.module.js";

import { OrbitControls } from "./OrbitControls.js";
import { CSS3DRenderer, CSS3DObject, CSS3DSprite } from "./CSS3DRenderer.js";
import { DragControls } from "./DragControls.js";
import { GLTFLoader } from "./GLTFLoader.js";
import { RGBELoader } from './RGBELoader.js';
import { RoughnessMipmapper } from './RoughnessMipmapper.js';
import Stats from './jsm/libs/stats.module.js';
import { GUI } from './jsm/libs/dat.gui.module.js';
import { Water } from './jsm/objects/Water.js';
import { Sky } from './jsm/objects/Sky.js';


var container;
var camera, scene, renderer, renderer1, controls;

var objects = [];
var animatepinkloww=[];
var animatepinkloww=[];
var arryros1curv2=[];
var arryros1curv3=[];


var arryrostobic=[];

var arryros2curv=[];
var arryros2curv1=[];
var arryros2curv2=[];
var arryros2curv3=[];

var changePosition = 0.1;

var mouse;


const raycaster = new THREE.Raycaster();



  var loader = new GLTFLoader();

  mouse = new THREE.Vector2();
  container = document.createElement("div");
  document.body.appendChild(container);

  // scene

  scene = new THREE.Scene();

  // camera

  camera = new THREE.PerspectiveCamera(
    30,
    window.innerWidth / window.innerHeight,
    1,
    10000
  );

  camera.position.set(
    0,
    0,
   600
  );


  // lights

  var light, materials;

  scene.add(new THREE.AmbientLight(0x666666));

  light = new THREE.DirectionalLight(0xdfebff, 0.1);
  light.position.set(50, 200, 100);
  light.position.multiplyScalar(1.3);

  light.castShadow = true;

  light.shadow.mapSize.width = 1024;
  light.shadow.mapSize.height = 1024;

  var d = 300;

  light.shadow.camera.left = -d;
  light.shadow.camera.right = d;
  light.shadow.camera.top = d;
  light.shadow.camera.bottom = -d;

  light.shadow.camera.far = 1000;

  scene.add(light);







document.getElementById('animatepinklow').addEventListener('click',animatepinklow);
document.getElementById('animatepinkhigh').addEventListener('click',animatepinkhigh);
document.getElementById('animatewhite').addEventListener('click',animatewhite);
document.getElementById('animatebeige').addEventListener('click',animatebeige);



document.getElementById('tobic').addEventListener('click',tobic);


// event rose2 red


document.getElementById('curve1rose2').addEventListener('click',curve1rose2);
hydrange
document.getElementById('hydrange').addEventListener('click',hydrange);

document.getElementById('hydrange_Pink').addEventListener('click',hydrange_Pink);

document.getElementById('gerberapink').addEventListener('click',gerberapink);
document.getElementById('gerberawhite').addEventListener('click',gerberawhite);



  // curve



  




  
  function animatepinklow() {
    loader.load('models/animate/animate_pink_low.glb', function (gltff) {
      gltff.scene.children[0].traverse(function (child) {
        if (child.isMesh) {
          if(child.name=="animate"){
            child.receiveShadow = true;
            child.castShadow = true;
           // child.material.envMap=cubeRenderTarget.texture
            child.material.needsUpdate = true;

            child.name="animatepinklow"
            objects.push(child)
            animatepinkloww.push(child)
            scene.add(child);

          }
           

   

        }

      });


    }, (xhr) => {
      
    }, (error) => {
      
    });


  }






  
  function animatepinkhigh() {
    loader.load('models/animate/animate_pink_high.glb', function (gltff) {
      gltff.scene.children[0].traverse(function (child) {
        if (child.isMesh) {
          if(child.name=="animate"){
            child.receiveShadow = true;
            child.castShadow = true;
           // child.material.envMap=cubeRenderTarget.texture
            child.material.needsUpdate = true;

            child.name="animatepinkhigh"
            objects.push(child)
            animatepinkloww.push(child)
            scene.add(child);

          }
           

   

        }

      });


    }, (xhr) => {
      
    }, (error) => {
      
    });


  }






  
  function animatewhite() {
    loader.load('models/animate/animate_white.glb', function (gltff) {
      gltff.scene.children[0].traverse(function (child) {
        if (child.isMesh) {
          if(child.name=="animate"){
            child.receiveShadow = true;
            child.castShadow = true;
           // child.material.envMap=cubeRenderTarget.texture
            child.material.needsUpdate = true;

            child.name="animatewhite"
            objects.push(child)
            animatepinkloww.push(child)
            scene.add(child);

          }
           

   

        }

      });


    }, (xhr) => {
      
    }, (error) => {
      
    });


  }
  function animatebeige() {
    loader.load('models/animate/animate_beige.glb', function (gltff) {
      gltff.scene.children[0].traverse(function (child) {
        if (child.isMesh) {
          if(child.name=="animate"){
            child.receiveShadow = true;
            child.castShadow = true;
           // child.material.envMap=cubeRenderTarget.texture
            child.material.needsUpdate = true;
            child.name="animatebeige"
            objects.push(child)
            animatepinkloww.push(child)
            scene.add(child);
          }
        }
      });
    }, (xhr) => {
    }, (error) => {
    });
  }
  // function roses2 red
  function curve1rose2() {
    loader.load('models/rose2/rose2curv1.glb', function (gltff) {
      gltff.scene.children[0].traverse(function (child) {
        if (child.isMesh) {
          if(child.name=="base"){
            child.receiveShadow = true;
            child.castShadow = true;
           // child.material.envMap=cubeRenderTarget.texture
            child.material.needsUpdate = true;

            child.name="rose2curv1"
            objects.push(child)
            animatepinkloww.push(child)
            scene.add(child);
          }
        }
      });
    }, (xhr) => {
    }, (error) => {
    });


  }





  // hydrange


  
  function hydrange() {
    loader.load('models/hydrange/hydrange.glb', function (gltff) {
      gltff.scene.children[0].traverse(function (child) {
        if (child.isMesh) {
          if(child.name=="base"){
            child.receiveShadow = true;
            child.castShadow = true;
          //  child.material.envMap=cubeRenderTarget.texture
            child.material.needsUpdate = true;

            child.name="hydrange"
            objects.push(child)
            animatepinkloww.push(child)
            scene.add(child);

          }
           

   

        }

      });


    }, (xhr) => {
      
    }, (error) => {
      
    });


  }




//  hydrange_Pink




function hydrange_Pink() {
  loader.load('models/hydrange/hydrange_Pink.glb', function (gltff) {
    gltff.scene.children[0].traverse(function (child) {
      if (child.isMesh) {
        if(child.name=="base"){
          child.receiveShadow = true;
          child.castShadow = true;
       //   child.material.envMap=cubeRenderTarget.texture
          child.material.needsUpdate = true;

          child.name="hydrange_Pink"
          objects.push(child)
          animatepinkloww.push(child)
          scene.add(child);

        }
         

 

      }

    });


  }, (xhr) => {
    
  }, (error) => {
    
  });


}

// Gerberapink



function gerberapink() {
  loader.load('models/Gerbera/gerbera_pink.glb', function (gltff) {
    gltff.scene.children[0].traverse(function (child) {
      if (child.isMesh) {
        if(child.name=="base"){
          child.receiveShadow = true;
          child.castShadow = true;
       //   child.material.envMap=cubeRenderTarget.texture
          child.material.needsUpdate = true;

          child.name="gerberapink"
          objects.push(child)
          animatepinkloww.push(child)
          scene.add(child);

        }
         

 

      }

    });


  }, (xhr) => {
    
  }, (error) => {
    
  });


}



 



function gerberawhite() {
  loader.load('models/Gerbera/gerbera_white.glb', function (gltff) {
    gltff.scene.children[0].traverse(function (child) {
      if (child.isMesh) {
        if(child.name=="base"){
          child.receiveShadow = true;
          child.castShadow = true;
       //   child.material.envMap=cubeRenderTarget.texture
          child.material.needsUpdate = true;

          child.name="gerberawhite"
          objects.push(child)
          animatepinkloww.push(child)
          scene.add(child);

        }
         

 

      }

    });


  }, (xhr) => {
    
  }, (error) => {
    
  });


}



//tobic rose




function tobic() {
  loader.load('models/tobic/topic.glb', function (gltff) {
    gltff.scene.children[0].traverse(function (child) {
      if (child.isMesh) {
        if(child.name=="topic"){
          child.receiveShadow = true;
          child.castShadow = true;
          child.name="tobic"
        //  child.material.envMap=cubeRenderTarget.texture
          objects.push(child)
          animatepinkloww.push(child)
          scene.add(child);

        }
         

 

      }

    });


  }, (xhr) => {
    
  }, (error) => {
    
  });


}



//https://github.com/mrdoob/three.js/blob/master/examples/webgl_materials_cubemap_refraction.html


  sndan()


  function sndan() {
    loader.load('models/sndan.glb', function (gltffsnd) {


      //face1.glb
      
      gltffsnd.scene.children[0].traverse(function (childsndan) {
        if (childsndan.isMesh) {
childsndan.name="sndan";
childsndan.receiveShadow = true;
childsndan.castShadow = true;
childsndan.material.transparent = true;
childsndan.material.opacity = 0.5;
childsndan.material.roughness = 0.02;

          scene.add(childsndan);


        }

      });


    }, (xhr) => {
      
    }, (error) => {
      
    });


  }




  // water


 // water1()

  
  function water1() {
    loader.load('models/water.glb', function (gltffsnd) {


      //face1.glb
      
      gltffsnd.scene.children[0].traverse(function (childsndan) {
        if (childsndan.isMesh) {
          childsndan.material.side = THREE.DoubleSide;

          scene.add(childsndan);


        }

      });


    }, (xhr) => {
      
    }, (error) => {
      
    });


  }








  //waterdown()

  function waterdown() {
    loader.load('models/water1.glb', function (gltffsnd) {


      //face1.glb
      
      gltffsnd.scene.children[0].traverse(function (childsndan) {
        if (childsndan.isMesh) {
          childsndan.material.side = THREE.DoubleSide;

          scene.add(childsndan);


        }

      });


    }, (xhr) => {
      
    }, (error) => {
      
    });


  }




// water




function onWindowResize() {

  camera.aspect = window.innerWidth / window.innerHeight;
  camera.updateProjectionMatrix();

  renderer.setSize( window.innerWidth, window.innerHeight );

}





















  scene.updateMatrixWorld(true);
 






  renderer = new THREE.WebGLRenderer({ antialias: true,alpha: true });

  renderer.setPixelRatio(window.devicePixelRatio);
  renderer.setSize(window.innerWidth, window.innerHeight);
  renderer.domElement.style.position = "absolute";
  renderer.domElement.style.top = 0;
  renderer.domElement.style.zIndex = "1";

  renderer.toneMapping = THREE.ACESFilmicToneMapping;
  renderer.outputEncoding = THREE.sRGBEncoding;

  container.appendChild(renderer.domElement);

  renderer.gammaInput = true;
  renderer.gammaOutput = true;

  renderer.shadowMap.enabled = true;


  var controls = new OrbitControls(camera, renderer.domElement);

var cubeRenderTarget = new THREE.WebGLCubeRenderTarget( 256 );
cubeRenderTarget.texture.type = THREE.HalfFloatType;
var cubeCamera = new THREE.CubeCamera( 1, 1000, cubeRenderTarget );
  

  window.addEventListener("resize", onWindowResize, false);

  let dragControls = new DragControls(objects, camera, renderer.domElement);

     console.log("DOWN");
 
 

  dragControls.addEventListener("dragstart", function(event) {
    
//console.log(event.object.name)
//console.log(event.object.position.x)
  



if(event.object.name=="gerberawhite" || event.object.name=="gerberapink" || event.object.name=="animatewhite" ||  event.object.name=="animatebeige" || event.object.name=="animatepinklow" || event.object.name=="animatepinkhigh" || event.object.name=="base" || event.object.name=="hydrange" || event.object.name=="hydrange_Pink" || event.object.name=="gerbera" || event.object.name=="rose1curv" || event.object.name=="rose1curv1"|| event.object.name=="rose1curv2" || event.object.name=="rose1curv3" || event.object.name=="rose2curv" || event.object.name=="rose2curv1"|| event.object.name=="rose2curv2" || event.object.name=="rose2curv3" || event.object.name=="tobic"){
  dragControls.enabled=true
  controls.enabled = false;


}else{
  dragControls.enabled=false
}

  });
  dragControls.addEventListener("dragend", function(event) {
    controls.enabled = true;

  });

  dragControls.addEventListener("drag", function(event) {

    //console.log(event.object.position.x)
    // document.getElementById("xpo").value=event.object.position.x;
    // document.getElementById("ypo").value=event.object.position.y;
    // document.getElementById("zpo").value=event.object.position.z;

 


  })






 const pmremGenerator = new THREE.PMREMGenerator(renderer);
 pmremGenerator.compileEquirectangularShader();
 new RGBELoader()
   .setDataType(THREE.UnsignedByteType)
   .setPath('textures/equirectangular/')
   .load('studio_small_08_1k.hdr', function (texture) {

     const envMap = pmremGenerator.fromEquirectangular(texture).texture;


     scene.environment = envMap;

     texture.dispose();
     pmremGenerator.dispose();

     render();
   });

 const roughnessMipmapper = new RoughnessMipmapper(renderer);





var clock5=new THREE.Clock();



const pointer = new THREE.Vector2();

function onPointerMove( event ) {

	// calculate pointer position in normalized device coordinates
	// (-1 to +1) for both components

	pointer.x = ( event.clientX / window.innerWidth ) * 2 - 1;
	pointer.y = - ( event.clientY / window.innerHeight ) * 2 + 1;

}




window.addEventListener( 'pointermove', onPointerMove );

window.requestAnimationFrame(render);


function update() {
  camera.updateProjectionMatrix();
}



let INTERSECTED;

renderer.domElement.addEventListener('click', ray, true);

function ray(){

  raycaster.setFromCamera( pointer, camera );

  const intersects = raycaster.intersectObjects( scene.children );
  if(intersects.length>0 ){
    console.log(intersects[0].object.name)
  
    
    if ( INTERSECTED = intersects[ 0 ].object ) {

      if(INTERSECTED.name!="sndan"){
      document.getElementById("rox").addEventListener('input',function(){
        INTERSECTED.rotation.x=document.getElementById("rox").value*0.01;
        document.getElementById("valrox").value=INTERSECTED.rotation.x;

      })

      document.getElementById("roy").addEventListener('input',function(){
        INTERSECTED.rotation.y=document.getElementById("roy").value*0.01;
        document.getElementById("valroy").value=INTERSECTED.rotation.y;

      })

      document.getElementById("roz").addEventListener('input',function(){
        INTERSECTED.rotation.z=document.getElementById("roz").value*0.01;
        document.getElementById("valroz").value=INTERSECTED.rotation.z;

      })

      document.getElementById('del').addEventListener('click',function(){
        scene.remove(INTERSECTED)
      })

    }

      }
    

}
}

//
animate();

function animate() {
  requestAnimationFrame(animate);

  /*
  if(mixer){

    mixer.update(clock5.getDelta());
    
    }
    */
  update();
  render();
  
}

function render() {
   
  renderer.render(scene, camera);

 
}

document.getElementById("getarry")?.addEventListener("click",function(){


for (let index = 0; index <  animatepinkloww.length; index++) {
  console.log("name : "+animatepinkloww[index].name+" positionX: "+animatepinkloww[index].position.x+" positinY: "+animatepinkloww[index].position.y+" positinZ: "+animatepinkloww[index].position.z+" rotationX: "+animatepinkloww[index].rotation.x+" rotationY: "+animatepinkloww[index].rotation.y+" rotationZ: "+animatepinkloww[index].rotation.z)
  
}










})


